# Copyright (c) Microsoft Corporation.
# Licensed under the MIT License.

REPO_URL := https://github.com/ga4gh-beacon/beacon-v2.git
REPO_BRANCH := main
REPO_COMMIT := 16862205c79294fae5473f7fa330bf5929b3b120 # 2024/07/18 @ 09:55
REPO_DIR := beacon-v2
CLIENT_DIR := dist/ga4gh-beacon-client
SERVER_DIR := dist/ga4gh-beacon-server
VENV_DIR := .venv
INPUT_SPEC := $(REPO_DIR)/framework/src/endpoints_combined.yaml # This file will be generated by `process-spec`
PYTHON_POST_PROCESS_FILE := "$(VENV_DIR)/bin/yapf -i"

.PHONY: all
all: \
	clean \
	common \
	generate-client \
	generate-server \

# --------------------------------------------------------------
# Common
# --------------------------------------------------------------

.PHONY: common
common: \
	clean \
	check-deps \
	clone-repo \
	apply-repo-patch \
	create-venv \
	install-python-requirements \
	install-npm-packages \
	process-spec

.PHONY: check-deps
check-deps:
	@echo "Checking dependencies..."
	@command -v git >/dev/null 2>&1 || { echo >&2 "git is required but it's not installed. Aborting."; exit 1; }
	@command -v python >/dev/null 2>&1 || { echo >&2 "Python is required but it's not installed. Aborting."; exit 1; }
	@command -v npm >/dev/null 2>&1 || { echo >&2 "npm is required but it's not installed. Aborting."; exit 1; }
	@command -v npx >/dev/null 2>&1 || { echo >&2 "npx is required but it's not installed. Aborting."; exit 1; }

.PHONY: clone-repo
clone-repo:
	@echo "Cloning repository..."
	git clone $(REPO_URL) -b $(REPO_BRANCH)
	cd $(REPO_DIR) && git checkout $(REPO_COMMIT)

.PHONY: apply-repo-patch
apply-repo-patch:
	@echo "Applying repository patch..."
	cd $(REPO_DIR) && git apply ../resources/repo/repo-changes.patch

.PHONY: create-venv
create-venv:
	@echo "Creating virtual environment..."
	python -m venv $(VENV_DIR)

.PHONY: install-python-requirements
install-python-requirements:
	@echo "Installing Python requirements..."
	source $(VENV_DIR)/bin/activate; \
	pip install --upgrade pip; \
	pip install -r requirements.txt

.PHONY: install-npm-packages
install-npm-packages:
	@echo "Installing npm packages..."
	npm install --no-save

.PHONY: process-spec
process-spec:
	@echo "Processing specification files..."
	source $(VENV_DIR)/bin/activate; \
	python resources/repo/process_spec.py

.PHONY: validate-spec
validate-spec:
	@echo "Validating specification..."
	npx @openapitools/openapi-generator-cli validate -i $(INPUT_SPEC)

# --------------------------------------------------------------
# Client
# --------------------------------------------------------------

.PHONY: generate-client
generate-client:
	@echo "Generating client..."
	PYTHON_POST_PROCESS_FILE=$(PYTHON_POST_PROCESS_FILE) \
	npx @openapitools/openapi-generator-cli generate \
		-i $(INPUT_SPEC) \
		-o $(CLIENT_DIR) \
		-c resources/client/openapi-generator-config-client.yaml \
		--openapi-generator-ignore-list "test/*"
	$(MAKE) apply-patch-client
	$(MAKE) document-source-client
	$(MAKE) copy-support-files-client

.PHONY: copy-support-files-client
copy-support-files-client:
	@echo "Copying client support files..."
	cp -r resources/client/support-files/. $(CLIENT_DIR)/

.PHONY: apply-patch-client
apply-patch-client:
	@echo "Applying client patch..."
	cd dist && patch -p0 < ../resources/client/client-changes.patch

.PHONY: document-source-client
document-source-client:
	@echo "Documenting client source..."
	@echo "Repository: $(REPO_URL)" > $(CLIENT_DIR)/.openapi-generator/SOURCE
	@echo "Branch: $(REPO_BRANCH)" >>  $(CLIENT_DIR)/.openapi-generator/SOURCE
	@echo "Commit: $$(cd $(REPO_DIR) && git rev-parse HEAD)" >> $(CLIENT_DIR)/.openapi-generator/SOURCE

# --------------------------------------------------------------
# Server
# --------------------------------------------------------------

.PHONY: generate-server
generate-server:
	@echo "Generating server..."
	PYTHON_POST_PROCESS_FILE=$(PYTHON_POST_PROCESS_FILE) \
	npx @openapitools/openapi-generator-cli generate \
		-i $(INPUT_SPEC) \
		-o $(SERVER_DIR) \
		-c resources/server/openapi-generator-config-server.yaml
	$(MAKE) apply-patch-server
	$(MAKE) document-source-server

.PHONY: apply-patch-server
apply-patch-server:
	@echo "Applying server patch..."
	cd dist && patch -p0 < ../resources/server/server-changes.patch

.PHONY: document-source-server
document-source-server:
	@echo "Documenting server source..."
	@echo "Repository: $(REPO_URL)" > $(SERVER_DIR)/.openapi-generator/SOURCE
	@echo "Branch: $(REPO_BRANCH)" >>  $(SERVER_DIR)/.openapi-generator/SOURCE
	@echo "Commit: $$(cd $(REPO_DIR) && git rev-parse HEAD)" >> $(SERVER_DIR)/.openapi-generator/SOURCE

# --------------------------------------------------------------
# Test
# --------------------------------------------------------------

.PHONY: mock-server
mock-server:
	@echo "Starting mock server..."
	npx @stoplight/prism-cli mock $(INPUT_SPEC)

# --------------------------------------------------------------
# Clean
# --------------------------------------------------------------

.PHONY: clean-client
clean-client:
	@echo "Cleaning client..."
	rm -rf $(CLIENT_DIR)

.PHONY: clean-server
clean-server:
	@echo "Cleaning server..."
	rm -rf $(SERVER_DIR)

.PHONY: clean
clean: clean-client clean-server
	@echo "Cleaning all..."
	-rm -rf $(REPO_DIR)
	-rm -rf $(VENV_DIR)
