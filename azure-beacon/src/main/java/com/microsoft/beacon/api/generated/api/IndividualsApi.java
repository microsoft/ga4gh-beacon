/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.8.0).
 * https://openapi-generator.tech Do not edit the class manually.
 */
package com.microsoft.beacon.api.generated.api;

import com.microsoft.beacon.api.generated.model.individual.BeaconFilteringTermsResponse;
import com.microsoft.beacon.api.generated.model.individual.BeaconRequestBody;
import com.microsoft.beacon.api.generated.model.individual.GetIndividuals200Response;
import com.microsoft.beacon.api.generated.model.individual.IncludeResultsetResponses;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.annotation.Generated;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Optional;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;

@Generated(
    value = "org.openapitools.codegen.languages.SpringCodegen",
    date = "2024-09-18T10:46:59.161413591-07:00[America/Los_Angeles]",
    comments = "Generator version: 7.8.0")
@Validated
@Tag(name = "GET Endpoints", description = "the GET Endpoints API")
@SuppressWarnings("PMD")
public interface IndividualsApi {

  default Optional<NativeWebRequest> getRequest() {
    return Optional.empty();
  }

  /**
   * GET /individuals Get a list of individuals
   *
   * @param requestedSchema Schema to be used to format the &#x60;result&#x60; field in the
   *     response. The response will use Beacon format. (optional)
   * @param skip (optional, default to 0)
   * @param limit (optional, default to 10)
   * @param includeResultsetResponses (optional, default to HIT)
   * @param filters (optional)
   * @return Successful operation. (status code 200) or An unsuccessful operation. (status code 200)
   */
  @Operation(
      operationId = "getIndividuals",
      description = "Get a list of individuals",
      tags = {"GET Endpoints"},
      responses = {
        @ApiResponse(
            responseCode = "200",
            description = "Successful operation.",
            content = {
              @Content(
                  mediaType = "application/json",
                  schema = @Schema(implementation = GetIndividuals200Response.class))
            }),
        @ApiResponse(responseCode = "default", description = "An unsuccessful operation.")
      })
  @RequestMapping(
      method = RequestMethod.GET,
      value = "/individuals",
      produces = {"application/json"})
  default ResponseEntity<GetIndividuals200Response> getIndividuals(
      @Parameter(
              name = "requestedSchema",
              description =
                  "Schema to be used to format the `result` field in the response. The response will use Beacon format.",
              in = ParameterIn.QUERY)
          @Valid
          @RequestParam(value = "requestedSchema", required = false)
          String requestedSchema,
      @Min(0)
          @Parameter(name = "skip", description = "", in = ParameterIn.QUERY)
          @Valid
          @RequestParam(value = "skip", required = false, defaultValue = "0")
          Integer skip,
      @Min(0)
          @Parameter(name = "limit", description = "", in = ParameterIn.QUERY)
          @Valid
          @RequestParam(value = "limit", required = false, defaultValue = "10")
          Integer limit,
      @Parameter(name = "includeResultsetResponses", description = "", in = ParameterIn.QUERY)
          @Valid
          @RequestParam(value = "includeResultsetResponses", required = false, defaultValue = "HIT")
          IncludeResultsetResponses includeResultsetResponses,
      @Parameter(name = "filters", description = "", in = ParameterIn.QUERY)
          @Valid
          @RequestParam(value = "filters", required = false)
          List<String> filters) {
    getRequest()
        .ifPresent(
            request -> {
              for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                  String exampleString =
                      "{ \"responseSummary\" : { \"exists\" : true }, \"meta\" : { \"apiVersion\" : \"apiVersion\", \"testMode\" : false, \"beaconId\" : \"beaconId\", \"receivedRequestSummary\" : { \"apiVersion\" : \"apiVersion\", \"includeResultsetResponses\" : \"HIT\", \"pagination\" : { \"previousPage\" : \"ab0sc&fe1dd\", \"nextPage\" : \"ab0sc&fe1dd\", \"limit\" : 10, \"skip\" : 0, \"currentPage\" : \"ab0sc&fe1dd\" }, \"requestedGranularity\" : \"boolean\", \"testMode\" : false, \"requestParameters\" : { \"$schema\" : \"$schema\" }, \"filters\" : [ \"BTO:0000199\", \"PATO:0000383\" ], \"requestedSchemas\" : [ { \"schema\" : \"schema\", \"entityType\" : \"Individual\" }, { \"schema\" : \"schema\", \"entityType\" : \"Individual\" } ] }, \"returnedSchemas\" : [ { \"schema\" : \"schema\", \"entityType\" : \"Individual\" }, { \"schema\" : \"schema\", \"entityType\" : \"Individual\" } ] }, \"beaconHandovers\" : [ { \"note\" : \"This handover link provides access to a summarized VCF.\", \"handoverType\" : { \"id\" : \"id\", \"label\" : \"label\" }, \"url\" : \"https://api.mygenomeservice.org/Handover/9dcc48d7-fc88-11e8-9110-b0c592dbf8c0/\" }, { \"note\" : \"This handover link provides access to a summarized VCF.\", \"handoverType\" : { \"id\" : \"id\", \"label\" : \"label\" }, \"url\" : \"https://api.mygenomeservice.org/Handover/9dcc48d7-fc88-11e8-9110-b0c592dbf8c0/\" } ], \"info\" : \"{}\" }";
                  ApiUtil.setExampleResponse(request, "application/json", exampleString);
                  break;
                }
              }
            });
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }

  /**
   * GET /individuals/filtering_terms Get the list of filtering terms that could be used with
   * individuals.
   *
   * @param skip (optional, default to 0)
   * @param limit (optional, default to 10)
   * @return Successful operation (status code 200) or An unsuccessful operation. (status code 200)
   */
  @Operation(
      operationId = "getIndividualsFilteringTerms",
      description = "Get the list of filtering terms that could be used with individuals.",
      tags = {"GET Endpoints"},
      responses = {
        @ApiResponse(
            responseCode = "200",
            description = "Successful operation",
            content = {
              @Content(
                  mediaType = "application/json",
                  schema = @Schema(implementation = BeaconFilteringTermsResponse.class))
            }),
        @ApiResponse(responseCode = "default", description = "An unsuccessful operation.")
      })
  @RequestMapping(
      method = RequestMethod.GET,
      value = "/individuals/filtering_terms",
      produces = {"application/json"})
  default ResponseEntity<BeaconFilteringTermsResponse> getIndividualsFilteringTerms(
      @Min(0)
          @Parameter(name = "skip", description = "", in = ParameterIn.QUERY)
          @Valid
          @RequestParam(value = "skip", required = false, defaultValue = "0")
          Integer skip,
      @Min(0)
          @Parameter(name = "limit", description = "", in = ParameterIn.QUERY)
          @Valid
          @RequestParam(value = "limit", required = false, defaultValue = "10")
          Integer limit) {
    getRequest()
        .ifPresent(
            request -> {
              for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                  String exampleString =
                      "{ \"meta\" : { \"apiVersion\" : \"apiVersion\", \"beaconId\" : \"beaconId\", \"returnedSchemas\" : [ { \"schema\" : \"schema\", \"entityType\" : \"Individual\" }, { \"schema\" : \"schema\", \"entityType\" : \"Individual\" } ] }, \"response\" : { \"filteringTerms\" : [ { \"id\" : \"id\", \"label\" : \"label\", \"scopes\" : [ \"scopes\", \"scopes\" ], \"type\" : \"type\" }, { \"id\" : \"id\", \"label\" : \"label\", \"scopes\" : [ \"scopes\", \"scopes\" ], \"type\" : \"type\" } ], \"resources\" : [ { \"nameSpacePrefix\" : \"nameSpacePrefix\", \"name\" : \"name\", \"id\" : \"id\", \"iriPrefix\" : \"iriPrefix\", \"version\" : \"version\", \"url\" : \"url\" }, { \"nameSpacePrefix\" : \"nameSpacePrefix\", \"name\" : \"name\", \"id\" : \"id\", \"iriPrefix\" : \"iriPrefix\", \"version\" : \"version\", \"url\" : \"url\" } ] } }";
                  ApiUtil.setExampleResponse(request, "application/json", exampleString);
                  break;
                }
              }
            });
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }

  /**
   * GET /individuals/{id} Get details about one individual, identified by its (unique) &#39;id&#39;
   *
   * @param id (required)
   * @return Successful operation. (status code 200) or An unsuccessful operation. (status code 200)
   */
  @Operation(
      operationId = "getOneIndividual",
      description = "Get details about one individual, identified by its (unique) 'id'",
      tags = {"GET Endpoints"},
      responses = {
        @ApiResponse(
            responseCode = "200",
            description = "Successful operation.",
            content = {
              @Content(
                  mediaType = "application/json",
                  schema = @Schema(implementation = GetIndividuals200Response.class))
            }),
        @ApiResponse(responseCode = "default", description = "An unsuccessful operation.")
      })
  @RequestMapping(
      method = RequestMethod.GET,
      value = "/individuals/{id}",
      produces = {"application/json"})
  default ResponseEntity<GetIndividuals200Response> getOneIndividual(
      @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH)
          @PathVariable("id")
          String id) {
    getRequest()
        .ifPresent(
            request -> {
              for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                  String exampleString =
                      "{ \"responseSummary\" : { \"exists\" : true }, \"meta\" : { \"apiVersion\" : \"apiVersion\", \"testMode\" : false, \"beaconId\" : \"beaconId\", \"receivedRequestSummary\" : { \"apiVersion\" : \"apiVersion\", \"includeResultsetResponses\" : \"HIT\", \"pagination\" : { \"previousPage\" : \"ab0sc&fe1dd\", \"nextPage\" : \"ab0sc&fe1dd\", \"limit\" : 10, \"skip\" : 0, \"currentPage\" : \"ab0sc&fe1dd\" }, \"requestedGranularity\" : \"boolean\", \"testMode\" : false, \"requestParameters\" : { \"$schema\" : \"$schema\" }, \"filters\" : [ \"BTO:0000199\", \"PATO:0000383\" ], \"requestedSchemas\" : [ { \"schema\" : \"schema\", \"entityType\" : \"Individual\" }, { \"schema\" : \"schema\", \"entityType\" : \"Individual\" } ] }, \"returnedSchemas\" : [ { \"schema\" : \"schema\", \"entityType\" : \"Individual\" }, { \"schema\" : \"schema\", \"entityType\" : \"Individual\" } ] }, \"beaconHandovers\" : [ { \"note\" : \"This handover link provides access to a summarized VCF.\", \"handoverType\" : { \"id\" : \"id\", \"label\" : \"label\" }, \"url\" : \"https://api.mygenomeservice.org/Handover/9dcc48d7-fc88-11e8-9110-b0c592dbf8c0/\" }, { \"note\" : \"This handover link provides access to a summarized VCF.\", \"handoverType\" : { \"id\" : \"id\", \"label\" : \"label\" }, \"url\" : \"https://api.mygenomeservice.org/Handover/9dcc48d7-fc88-11e8-9110-b0c592dbf8c0/\" } ], \"info\" : \"{}\" }";
                  ApiUtil.setExampleResponse(request, "application/json", exampleString);
                  break;
                }
              }
            });
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }

  /**
   * GET /individuals/{id}/biosamples Get the biosamples list from one individual, identified by its
   * (unique) &#39;id&#39;
   *
   * @param id (required)
   * @param requestedSchema Schema to be used to format the &#x60;result&#x60; field in the
   *     response. The response will use Beacon format. (optional)
   * @param skip (optional, default to 0)
   * @param limit (optional, default to 10)
   * @return Successful operation. (status code 200) or An unsuccessful operation. (status code 200)
   */
  @Operation(
      operationId = "getOneIndividualBiosamples",
      description = "Get the biosamples list from one individual, identified by its (unique) 'id'",
      tags = {"GET Endpoints"},
      responses = {
        @ApiResponse(
            responseCode = "200",
            description = "Successful operation.",
            content = {
              @Content(
                  mediaType = "application/json",
                  schema = @Schema(implementation = GetIndividuals200Response.class))
            }),
        @ApiResponse(responseCode = "default", description = "An unsuccessful operation.")
      })
  @RequestMapping(
      method = RequestMethod.GET,
      value = "/individuals/{id}/biosamples",
      produces = {"application/json"})
  default ResponseEntity<GetIndividuals200Response> getOneIndividualBiosamples(
      @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH)
          @PathVariable("id")
          String id,
      @Parameter(
              name = "requestedSchema",
              description =
                  "Schema to be used to format the `result` field in the response. The response will use Beacon format.",
              in = ParameterIn.QUERY)
          @Valid
          @RequestParam(value = "requestedSchema", required = false)
          String requestedSchema,
      @Min(0)
          @Parameter(name = "skip", description = "", in = ParameterIn.QUERY)
          @Valid
          @RequestParam(value = "skip", required = false, defaultValue = "0")
          Integer skip,
      @Min(0)
          @Parameter(name = "limit", description = "", in = ParameterIn.QUERY)
          @Valid
          @RequestParam(value = "limit", required = false, defaultValue = "10")
          Integer limit) {
    getRequest()
        .ifPresent(
            request -> {
              for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                  String exampleString =
                      "{ \"responseSummary\" : { \"exists\" : true }, \"meta\" : { \"apiVersion\" : \"apiVersion\", \"testMode\" : false, \"beaconId\" : \"beaconId\", \"receivedRequestSummary\" : { \"apiVersion\" : \"apiVersion\", \"includeResultsetResponses\" : \"HIT\", \"pagination\" : { \"previousPage\" : \"ab0sc&fe1dd\", \"nextPage\" : \"ab0sc&fe1dd\", \"limit\" : 10, \"skip\" : 0, \"currentPage\" : \"ab0sc&fe1dd\" }, \"requestedGranularity\" : \"boolean\", \"testMode\" : false, \"requestParameters\" : { \"$schema\" : \"$schema\" }, \"filters\" : [ \"BTO:0000199\", \"PATO:0000383\" ], \"requestedSchemas\" : [ { \"schema\" : \"schema\", \"entityType\" : \"Individual\" }, { \"schema\" : \"schema\", \"entityType\" : \"Individual\" } ] }, \"returnedSchemas\" : [ { \"schema\" : \"schema\", \"entityType\" : \"Individual\" }, { \"schema\" : \"schema\", \"entityType\" : \"Individual\" } ] }, \"beaconHandovers\" : [ { \"note\" : \"This handover link provides access to a summarized VCF.\", \"handoverType\" : { \"id\" : \"id\", \"label\" : \"label\" }, \"url\" : \"https://api.mygenomeservice.org/Handover/9dcc48d7-fc88-11e8-9110-b0c592dbf8c0/\" }, { \"note\" : \"This handover link provides access to a summarized VCF.\", \"handoverType\" : { \"id\" : \"id\", \"label\" : \"label\" }, \"url\" : \"https://api.mygenomeservice.org/Handover/9dcc48d7-fc88-11e8-9110-b0c592dbf8c0/\" } ], \"info\" : \"{}\" }";
                  ApiUtil.setExampleResponse(request, "application/json", exampleString);
                  break;
                }
              }
            });
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }

  /**
   * GET /individuals/{id}/g_variants Get the genomic variants list from one individual, identified
   * by its (unique) &#39;id&#39;
   *
   * @param id (required)
   * @param requestedSchema Schema to be used to format the &#x60;result&#x60; field in the
   *     response. The response will use Beacon format. (optional)
   * @param skip (optional, default to 0)
   * @param limit (optional, default to 10)
   * @return Successful operation. (status code 200) or An unsuccessful operation. (status code 200)
   */
  @Operation(
      operationId = "getOneIndividualGenomicVariants",
      description =
          "Get the genomic variants list from one individual, identified by its (unique) 'id'",
      tags = {"GET Endpoints"},
      responses = {
        @ApiResponse(
            responseCode = "200",
            description = "Successful operation.",
            content = {
              @Content(
                  mediaType = "application/json",
                  schema = @Schema(implementation = GetIndividuals200Response.class))
            }),
        @ApiResponse(responseCode = "default", description = "An unsuccessful operation.")
      })
  @RequestMapping(
      method = RequestMethod.GET,
      value = "/individuals/{id}/g_variants",
      produces = {"application/json"})
  default ResponseEntity<GetIndividuals200Response> getOneIndividualGenomicVariants(
      @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH)
          @PathVariable("id")
          String id,
      @Parameter(
              name = "requestedSchema",
              description =
                  "Schema to be used to format the `result` field in the response. The response will use Beacon format.",
              in = ParameterIn.QUERY)
          @Valid
          @RequestParam(value = "requestedSchema", required = false)
          String requestedSchema,
      @Min(0)
          @Parameter(name = "skip", description = "", in = ParameterIn.QUERY)
          @Valid
          @RequestParam(value = "skip", required = false, defaultValue = "0")
          Integer skip,
      @Min(0)
          @Parameter(name = "limit", description = "", in = ParameterIn.QUERY)
          @Valid
          @RequestParam(value = "limit", required = false, defaultValue = "10")
          Integer limit) {
    getRequest()
        .ifPresent(
            request -> {
              for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                  String exampleString =
                      "{ \"responseSummary\" : { \"exists\" : true }, \"meta\" : { \"apiVersion\" : \"apiVersion\", \"testMode\" : false, \"beaconId\" : \"beaconId\", \"receivedRequestSummary\" : { \"apiVersion\" : \"apiVersion\", \"includeResultsetResponses\" : \"HIT\", \"pagination\" : { \"previousPage\" : \"ab0sc&fe1dd\", \"nextPage\" : \"ab0sc&fe1dd\", \"limit\" : 10, \"skip\" : 0, \"currentPage\" : \"ab0sc&fe1dd\" }, \"requestedGranularity\" : \"boolean\", \"testMode\" : false, \"requestParameters\" : { \"$schema\" : \"$schema\" }, \"filters\" : [ \"BTO:0000199\", \"PATO:0000383\" ], \"requestedSchemas\" : [ { \"schema\" : \"schema\", \"entityType\" : \"Individual\" }, { \"schema\" : \"schema\", \"entityType\" : \"Individual\" } ] }, \"returnedSchemas\" : [ { \"schema\" : \"schema\", \"entityType\" : \"Individual\" }, { \"schema\" : \"schema\", \"entityType\" : \"Individual\" } ] }, \"beaconHandovers\" : [ { \"note\" : \"This handover link provides access to a summarized VCF.\", \"handoverType\" : { \"id\" : \"id\", \"label\" : \"label\" }, \"url\" : \"https://api.mygenomeservice.org/Handover/9dcc48d7-fc88-11e8-9110-b0c592dbf8c0/\" }, { \"note\" : \"This handover link provides access to a summarized VCF.\", \"handoverType\" : { \"id\" : \"id\", \"label\" : \"label\" }, \"url\" : \"https://api.mygenomeservice.org/Handover/9dcc48d7-fc88-11e8-9110-b0c592dbf8c0/\" } ], \"info\" : \"{}\" }";
                  ApiUtil.setExampleResponse(request, "application/json", exampleString);
                  break;
                }
              }
            });
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }

  /**
   * POST /individuals/filtering_terms Get the list of filtering terms that could be used with
   * individuals.
   *
   * @param beaconRequestBody (required)
   * @return Successful operation (status code 200) or An unsuccessful operation. (status code 200)
   */
  @Operation(
      operationId = "postIndividualsFilteringTerms",
      description = "Get the list of filtering terms that could be used with individuals.",
      tags = {"POST Endpoints"},
      responses = {
        @ApiResponse(
            responseCode = "200",
            description = "Successful operation",
            content = {
              @Content(
                  mediaType = "application/json",
                  schema = @Schema(implementation = BeaconFilteringTermsResponse.class))
            }),
        @ApiResponse(responseCode = "default", description = "An unsuccessful operation.")
      })
  @RequestMapping(
      method = RequestMethod.POST,
      value = "/individuals/filtering_terms",
      produces = {"application/json"},
      consumes = {"application/json"})
  default ResponseEntity<BeaconFilteringTermsResponse> postIndividualsFilteringTerms(
      @Parameter(name = "BeaconRequestBody", description = "", required = true) @Valid @RequestBody
          BeaconRequestBody beaconRequestBody) {
    getRequest()
        .ifPresent(
            request -> {
              for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                  String exampleString =
                      "{ \"meta\" : { \"apiVersion\" : \"apiVersion\", \"beaconId\" : \"beaconId\", \"returnedSchemas\" : [ { \"schema\" : \"schema\", \"entityType\" : \"Individual\" }, { \"schema\" : \"schema\", \"entityType\" : \"Individual\" } ] }, \"response\" : { \"filteringTerms\" : [ { \"id\" : \"id\", \"label\" : \"label\", \"scopes\" : [ \"scopes\", \"scopes\" ], \"type\" : \"type\" }, { \"id\" : \"id\", \"label\" : \"label\", \"scopes\" : [ \"scopes\", \"scopes\" ], \"type\" : \"type\" } ], \"resources\" : [ { \"nameSpacePrefix\" : \"nameSpacePrefix\", \"name\" : \"name\", \"id\" : \"id\", \"iriPrefix\" : \"iriPrefix\", \"version\" : \"version\", \"url\" : \"url\" }, { \"nameSpacePrefix\" : \"nameSpacePrefix\", \"name\" : \"name\", \"id\" : \"id\", \"iriPrefix\" : \"iriPrefix\", \"version\" : \"version\", \"url\" : \"url\" } ] } }";
                  ApiUtil.setExampleResponse(request, "application/json", exampleString);
                  break;
                }
              }
            });
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }

  /**
   * POST /individuals Get a list of example entries
   *
   * @param beaconRequestBody (required)
   * @return Successful operation. (status code 200) or An unsuccessful operation. (status code 200)
   */
  @Operation(
      operationId = "postIndividualsRequest",
      description = "Get a list of example entries",
      tags = {"POST Endpoints"},
      responses = {
        @ApiResponse(
            responseCode = "200",
            description = "Successful operation.",
            content = {
              @Content(
                  mediaType = "application/json",
                  schema = @Schema(implementation = GetIndividuals200Response.class))
            }),
        @ApiResponse(responseCode = "default", description = "An unsuccessful operation.")
      })
  @RequestMapping(
      method = RequestMethod.POST,
      value = "/individuals",
      produces = {"application/json"},
      consumes = {"application/json"})
  default ResponseEntity<GetIndividuals200Response> postIndividualsRequest(
      @Parameter(name = "BeaconRequestBody", description = "", required = true) @Valid @RequestBody
          BeaconRequestBody beaconRequestBody) {
    getRequest()
        .ifPresent(
            request -> {
              for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                  String exampleString =
                      "{ \"responseSummary\" : { \"exists\" : true }, \"meta\" : { \"apiVersion\" : \"apiVersion\", \"testMode\" : false, \"beaconId\" : \"beaconId\", \"receivedRequestSummary\" : { \"apiVersion\" : \"apiVersion\", \"includeResultsetResponses\" : \"HIT\", \"pagination\" : { \"previousPage\" : \"ab0sc&fe1dd\", \"nextPage\" : \"ab0sc&fe1dd\", \"limit\" : 10, \"skip\" : 0, \"currentPage\" : \"ab0sc&fe1dd\" }, \"requestedGranularity\" : \"boolean\", \"testMode\" : false, \"requestParameters\" : { \"$schema\" : \"$schema\" }, \"filters\" : [ \"BTO:0000199\", \"PATO:0000383\" ], \"requestedSchemas\" : [ { \"schema\" : \"schema\", \"entityType\" : \"Individual\" }, { \"schema\" : \"schema\", \"entityType\" : \"Individual\" } ] }, \"returnedSchemas\" : [ { \"schema\" : \"schema\", \"entityType\" : \"Individual\" }, { \"schema\" : \"schema\", \"entityType\" : \"Individual\" } ] }, \"beaconHandovers\" : [ { \"note\" : \"This handover link provides access to a summarized VCF.\", \"handoverType\" : { \"id\" : \"id\", \"label\" : \"label\" }, \"url\" : \"https://api.mygenomeservice.org/Handover/9dcc48d7-fc88-11e8-9110-b0c592dbf8c0/\" }, { \"note\" : \"This handover link provides access to a summarized VCF.\", \"handoverType\" : { \"id\" : \"id\", \"label\" : \"label\" }, \"url\" : \"https://api.mygenomeservice.org/Handover/9dcc48d7-fc88-11e8-9110-b0c592dbf8c0/\" } ], \"info\" : \"{}\" }";
                  ApiUtil.setExampleResponse(request, "application/json", exampleString);
                  break;
                }
              }
            });
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }

  /**
   * POST /individuals/{id} Get details about one Individual, identified by its (unique)
   * &#39;id&#39;
   *
   * @param id (required)
   * @param beaconRequestBody (required)
   * @return Successful operation. (status code 200) or An unsuccessful operation. (status code 200)
   */
  @Operation(
      operationId = "postOneIndividual",
      description = "Get details about one Individual, identified by its (unique) 'id'",
      tags = {"POST Endpoints"},
      responses = {
        @ApiResponse(
            responseCode = "200",
            description = "Successful operation.",
            content = {
              @Content(
                  mediaType = "application/json",
                  schema = @Schema(implementation = GetIndividuals200Response.class))
            }),
        @ApiResponse(responseCode = "default", description = "An unsuccessful operation.")
      })
  @RequestMapping(
      method = RequestMethod.POST,
      value = "/individuals/{id}",
      produces = {"application/json"},
      consumes = {"application/json"})
  default ResponseEntity<GetIndividuals200Response> postOneIndividual(
      @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH)
          @PathVariable("id")
          String id,
      @Parameter(name = "BeaconRequestBody", description = "", required = true) @Valid @RequestBody
          BeaconRequestBody beaconRequestBody) {
    getRequest()
        .ifPresent(
            request -> {
              for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                  String exampleString =
                      "{ \"responseSummary\" : { \"exists\" : true }, \"meta\" : { \"apiVersion\" : \"apiVersion\", \"testMode\" : false, \"beaconId\" : \"beaconId\", \"receivedRequestSummary\" : { \"apiVersion\" : \"apiVersion\", \"includeResultsetResponses\" : \"HIT\", \"pagination\" : { \"previousPage\" : \"ab0sc&fe1dd\", \"nextPage\" : \"ab0sc&fe1dd\", \"limit\" : 10, \"skip\" : 0, \"currentPage\" : \"ab0sc&fe1dd\" }, \"requestedGranularity\" : \"boolean\", \"testMode\" : false, \"requestParameters\" : { \"$schema\" : \"$schema\" }, \"filters\" : [ \"BTO:0000199\", \"PATO:0000383\" ], \"requestedSchemas\" : [ { \"schema\" : \"schema\", \"entityType\" : \"Individual\" }, { \"schema\" : \"schema\", \"entityType\" : \"Individual\" } ] }, \"returnedSchemas\" : [ { \"schema\" : \"schema\", \"entityType\" : \"Individual\" }, { \"schema\" : \"schema\", \"entityType\" : \"Individual\" } ] }, \"beaconHandovers\" : [ { \"note\" : \"This handover link provides access to a summarized VCF.\", \"handoverType\" : { \"id\" : \"id\", \"label\" : \"label\" }, \"url\" : \"https://api.mygenomeservice.org/Handover/9dcc48d7-fc88-11e8-9110-b0c592dbf8c0/\" }, { \"note\" : \"This handover link provides access to a summarized VCF.\", \"handoverType\" : { \"id\" : \"id\", \"label\" : \"label\" }, \"url\" : \"https://api.mygenomeservice.org/Handover/9dcc48d7-fc88-11e8-9110-b0c592dbf8c0/\" } ], \"info\" : \"{}\" }";
                  ApiUtil.setExampleResponse(request, "application/json", exampleString);
                  break;
                }
              }
            });
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }

  /**
   * POST /individuals/{id}/biosamples Get the biosamples list from one individual, identified by
   * its (unique) &#39;id&#39;
   *
   * @param id (required)
   * @param beaconRequestBody (required)
   * @return Successful operation. (status code 200) or An unsuccessful operation. (status code 200)
   */
  @Operation(
      operationId = "postOneIndividualBiosamples",
      description = "Get the biosamples list from one individual, identified by its (unique) 'id'",
      tags = {"POST Endpoints"},
      responses = {
        @ApiResponse(
            responseCode = "200",
            description = "Successful operation.",
            content = {
              @Content(
                  mediaType = "application/json",
                  schema = @Schema(implementation = GetIndividuals200Response.class))
            }),
        @ApiResponse(responseCode = "default", description = "An unsuccessful operation.")
      })
  @RequestMapping(
      method = RequestMethod.POST,
      value = "/individuals/{id}/biosamples",
      produces = {"application/json"},
      consumes = {"application/json"})
  default ResponseEntity<GetIndividuals200Response> postOneIndividualBiosamples(
      @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH)
          @PathVariable("id")
          String id,
      @Parameter(name = "BeaconRequestBody", description = "", required = true) @Valid @RequestBody
          BeaconRequestBody beaconRequestBody) {
    getRequest()
        .ifPresent(
            request -> {
              for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                  String exampleString =
                      "{ \"responseSummary\" : { \"exists\" : true }, \"meta\" : { \"apiVersion\" : \"apiVersion\", \"testMode\" : false, \"beaconId\" : \"beaconId\", \"receivedRequestSummary\" : { \"apiVersion\" : \"apiVersion\", \"includeResultsetResponses\" : \"HIT\", \"pagination\" : { \"previousPage\" : \"ab0sc&fe1dd\", \"nextPage\" : \"ab0sc&fe1dd\", \"limit\" : 10, \"skip\" : 0, \"currentPage\" : \"ab0sc&fe1dd\" }, \"requestedGranularity\" : \"boolean\", \"testMode\" : false, \"requestParameters\" : { \"$schema\" : \"$schema\" }, \"filters\" : [ \"BTO:0000199\", \"PATO:0000383\" ], \"requestedSchemas\" : [ { \"schema\" : \"schema\", \"entityType\" : \"Individual\" }, { \"schema\" : \"schema\", \"entityType\" : \"Individual\" } ] }, \"returnedSchemas\" : [ { \"schema\" : \"schema\", \"entityType\" : \"Individual\" }, { \"schema\" : \"schema\", \"entityType\" : \"Individual\" } ] }, \"beaconHandovers\" : [ { \"note\" : \"This handover link provides access to a summarized VCF.\", \"handoverType\" : { \"id\" : \"id\", \"label\" : \"label\" }, \"url\" : \"https://api.mygenomeservice.org/Handover/9dcc48d7-fc88-11e8-9110-b0c592dbf8c0/\" }, { \"note\" : \"This handover link provides access to a summarized VCF.\", \"handoverType\" : { \"id\" : \"id\", \"label\" : \"label\" }, \"url\" : \"https://api.mygenomeservice.org/Handover/9dcc48d7-fc88-11e8-9110-b0c592dbf8c0/\" } ], \"info\" : \"{}\" }";
                  ApiUtil.setExampleResponse(request, "application/json", exampleString);
                  break;
                }
              }
            });
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }

  /**
   * POST /individuals/{id}/g_variants Get the genomic variants list from one individual, identified
   * by its (unique) &#39;id&#39;
   *
   * @param id (required)
   * @param beaconRequestBody (required)
   * @return Successful operation. (status code 200) or An unsuccessful operation. (status code 200)
   */
  @Operation(
      operationId = "postOneIndividualGenomicVariants",
      description =
          "Get the genomic variants list from one individual, identified by its (unique) 'id'",
      tags = {"POST Endpoints"},
      responses = {
        @ApiResponse(
            responseCode = "200",
            description = "Successful operation.",
            content = {
              @Content(
                  mediaType = "application/json",
                  schema = @Schema(implementation = GetIndividuals200Response.class))
            }),
        @ApiResponse(responseCode = "default", description = "An unsuccessful operation.")
      })
  @RequestMapping(
      method = RequestMethod.POST,
      value = "/individuals/{id}/g_variants",
      produces = {"application/json"},
      consumes = {"application/json"})
  default ResponseEntity<GetIndividuals200Response> postOneIndividualGenomicVariants(
      @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH)
          @PathVariable("id")
          String id,
      @Parameter(name = "BeaconRequestBody", description = "", required = true) @Valid @RequestBody
          BeaconRequestBody beaconRequestBody) {
    getRequest()
        .ifPresent(
            request -> {
              for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                  String exampleString =
                      "{ \"responseSummary\" : { \"exists\" : true }, \"meta\" : { \"apiVersion\" : \"apiVersion\", \"testMode\" : false, \"beaconId\" : \"beaconId\", \"receivedRequestSummary\" : { \"apiVersion\" : \"apiVersion\", \"includeResultsetResponses\" : \"HIT\", \"pagination\" : { \"previousPage\" : \"ab0sc&fe1dd\", \"nextPage\" : \"ab0sc&fe1dd\", \"limit\" : 10, \"skip\" : 0, \"currentPage\" : \"ab0sc&fe1dd\" }, \"requestedGranularity\" : \"boolean\", \"testMode\" : false, \"requestParameters\" : { \"$schema\" : \"$schema\" }, \"filters\" : [ \"BTO:0000199\", \"PATO:0000383\" ], \"requestedSchemas\" : [ { \"schema\" : \"schema\", \"entityType\" : \"Individual\" }, { \"schema\" : \"schema\", \"entityType\" : \"Individual\" } ] }, \"returnedSchemas\" : [ { \"schema\" : \"schema\", \"entityType\" : \"Individual\" }, { \"schema\" : \"schema\", \"entityType\" : \"Individual\" } ] }, \"beaconHandovers\" : [ { \"note\" : \"This handover link provides access to a summarized VCF.\", \"handoverType\" : { \"id\" : \"id\", \"label\" : \"label\" }, \"url\" : \"https://api.mygenomeservice.org/Handover/9dcc48d7-fc88-11e8-9110-b0c592dbf8c0/\" }, { \"note\" : \"This handover link provides access to a summarized VCF.\", \"handoverType\" : { \"id\" : \"id\", \"label\" : \"label\" }, \"url\" : \"https://api.mygenomeservice.org/Handover/9dcc48d7-fc88-11e8-9110-b0c592dbf8c0/\" } ], \"info\" : \"{}\" }";
                  ApiUtil.setExampleResponse(request, "application/json", exampleString);
                  break;
                }
              }
            });
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }
}
